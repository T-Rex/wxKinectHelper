set(SRCS 
	KinectServer.cpp 
	ServerMain.cpp
	ext_thread.cpp)
set(HFILES 
	KinectServer.h
	ext_thread.h)

set(INCLUDE_DIRECTORIES ${BASE_INCLUDE_DIRECTORIES} 
   ${PROJECT_ROOT_DIR}/libevent/include
   ${PROJECT_ROOT_DIR}/libevent/WIN32-Code
   ${PROJECT_ROOT_DIR}/ObjDetector
   ${PROJECT_ROOT_DIR}/KinectTypes
   ${PROJECT_ROOT_DIR}/3dparty/libjson/Source
   ${OpenCV_INCLUDE_DIRS}
)
set(LINK_DIRECTORIES ${LINK_DIRECTORIES}
   ${PROJECT_ROOT_DIR}/libevent/${OS_BASE_NAME}${LIB_SUFFIX}
   ${PROJECT_ROOT_DIR}/KinectTypes/${OS_BASE_NAME}${LIB_SUFFIX}
   ${PROJECT_ROOT_DIR}/3dparty/libjson/build/${OS_BASE_NAME}${LIB_SUFFIX}
)
set(EXECUTABLE_NAME KinectServer)

if(USE_OPENCV)
	set(SRCS ${SRCS} SimpleDataProcessor.cpp)
	set(HFILES ${HFILES} SimpleDataProcessor.h)
	set(INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES} 
	   ${PROJECT_ROOT_DIR}/ObjDetector
	)
	set(LINK_DIRECTORIES ${LINK_DIRECTORIES}
	   ${PROJECT_ROOT_DIR}/ObjDetector/${OS_BASE_NAME}${LIB_SUFFIX}
	   ${OpenCV_LINK_DIRS}
	)
	set(PREPROCESSOR_DEFINITIONS ${PREPROCESSOR_DEFINITIONS};${OpenCV_DEFINITIONS};/DUSE_OPENCV)
	set(LIBS ${LIBS} ${OpenCV_LIBS} ObjDetector.lib)
	set(KINECT_SERVER_DEPENDENCIES ObjectDetect)
else(USE_OPENCV)
	if(USE_PCL)
		set(SRCS ${SRCS} PclDataProcessor.cpp)
		set(HFILES ${HFILES} PclDataProcessor.h)
		set(INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES} 
		   ${PROJECT_ROOT_DIR}/Segmentation
		   ${PCL_INCLUDE_DIRS}
		)
		set(LINK_DIRECTORIES ${LINK_DIRECTORIES}
		   ${PROJECT_ROOT_DIR}/Segmentation/${OS_BASE_NAME}${LIB_SUFFIX}
		   ${PCL_LIBRARY_DIRS}
		)
		set(PREPROCESSOR_DEFINITIONS ${PREPROCESSOR_DEFINITIONS};${PCL_DEFINITIONS};/DUSE_PCL)
		set(LINK_DIRECTORIES ${LINK_DIRECTORIES} ${PCL_LIBRARY_DIRS})
		set(LIBS ${LIBS} ${PCL_LIBRARIES} Segmentation.lib)
		set(KINECT_SERVER_DEPENDENCIES Segmentation)
	endif(USE_PCL)
endif(USE_OPENCV)
set(KINECT_SERVER_DEPENDENCIES ${KINECT_SERVER_DEPENDENCIES} libevent KinectTypes libjson)
set(LIBS ${LIBS} KinectTypes.lib libjson)
set(TEST_MODE 1)
if(WIN32)
	set(PREPROCESSOR_DEFINITIONS ${PREPROCESSOR_DEFINITIONS};/D_CONSOLE)
	if(TEST_MODE)
		set(PREPROCESSOR_DEFINITIONS ${PREPROCESSOR_DEFINITIONS};/DFIRST_TEST)
	endif(TEST_MODE)
	set(LINK_DIRECTORIES ${LINK_DIRECTORIES})
	set(LIBS ${LIBS})
else()
	set(PREPROCESSOR_DEFINITIONS ${PREPROCESSOR_DEFINITIONS})
endif(WIN32)
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /DNDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /DJSON_DEBUG")

if(APPLE)
   set(LINK_DIRECTORIES ${LINK_DIRECTORIES};/usr/lib)
endif(APPLE)

if(LINUX)
   set(LINK_DIRECTORIES ${LINK_DIRECTORIES};/usr/local/lib)
   set(THIRDPARTY_LIBS freenect)
endif(LINUX)

if(WIN32)
   set(OS_LIBS Shlwapi.lib comctl32.lib rpcrt4.lib winmm.lib advapi32.lib wsock32.lib ws2_32.lib wldap32.lib gdiplus.lib)
endif(WIN32)


add_definitions(${PREPROCESSOR_DEFINITIONS})

include_directories(${INCLUDE_DIRECTORIES})

#if(WIN32)
#    set(EXECUTABLE_TYPE WIN32)
#endif(WIN32)
#if(APPLE)
#    set(MACOSX_BUNDLE YES)
#    set(EXECUTABLE_TYPE MACOSX_BUNDLE)
#endif(APPLE)

set(SRCS ${SRCS} ${HFILES})

link_directories(${LINK_DIRECTORIES})

add_executable(${EXECUTABLE_NAME} ${EXECUTABLE_TYPE} ${SRCS})

set(LIBS ${LIBS} ${THIRDPARTY_LIBS} ${OS_LIBS})
set(LIBS libevent ${LIBS})
target_link_libraries(${EXECUTABLE_NAME} ${LIBS})

set(EXE_DIR bin)
set(TARGET_LOCATION ${PROJECT_SOURCE_DIR}/${EXE_DIR}${LIB_SUFFIX})
set_target_properties(${EXECUTABLE_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${TARGET_LOCATION})

add_dependencies(${EXECUTABLE_NAME} ${KINECT_SERVER_DEPENDENCIES})

if(APPLE)
   set_target_properties(${EXECUTABLE_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist)
   set(BUNDLE_LOC ${TARGET_LOCATION}/$(CONFIGURATION)/${EXECUTABLE_NAME})
endif(APPLE)

